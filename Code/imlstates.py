# -*- coding: utf-8 -*-
"""IMLStates.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M8d58rK65ZmhzcStFCBGelMz241_CHdK
"""

!unzip covid19-in-india.zip

# Commented out IPython magic to ensure Python compatibility.
import numpy as np 
import matplotlib.pyplot as plt 
import matplotlib.colors as mcolors
import xgboost
from sklearn.linear_model import LinearRegression, BayesianRidge
from sklearn.model_selection import RandomizedSearchCV, train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, mean_absolute_error
import datetime
import operator 
import pandas as pd

plt.style.use('fivethirtyeight')
# %matplotlib inline




coviddata = pd.read_csv("covid_19_india.csv", usecols = ['Date', 'Time', 'State/UnionTerritory',	'Cured',	'Deaths',	'Confirmed'])

input = 'Kerala'

newdata1 = coviddata[coviddata['State/UnionTerritory'] == input]

recover = newdata1['Cured']
death = newdata1['Deaths']
confirmed = newdata1['Confirmed']
date = np.array(newdata1['Date'])[0]+" For "+input+" State of India "
start_date = 'Number of Days from First Case on Date'+date

svr_rbf3 = SVR(kernel='poly', degree=3)

lw = 2

model_color = ['m', 'c', 'g']

y = pd.DataFrame(confirmed)

X = pd.DataFrame(range(len(confirmed)))


confirmed_model = svr_rbf3.fit(X, y)

plt.scatter(X, y, color = 'red')

t = pd.DataFrame(range(len(X)))

X_grid = np.arange(min(t), max(t), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))

plt.plot(t, confirmed_model.predict(t), color = 'blue')
plt.title('Confirmed Cases From'+date)
plt.xlabel(start_date)
plt.ylabel('Total Confirm Cases')
plt.show()
n = len(X)
t10 = pd.DataFrame({"Date" : range(n, n + 10)})

import pandas as pd
from datetime import datetime
t1 = pd.DataFrame({"Date" : pd.date_range(start="2020-05-01",end="2020-05-10")})

t1['Predicted Number of Confirmed Cases'] = pd.DataFrame(confirmed_model.predict(t10))




X["data"] = confirmed_model.predict(X)

y = pd.DataFrame(recover)
svr_rbf3 = SVR(kernel='poly', degree=3)
recover_model = svr_rbf3.fit(X, y)

data = recover_model.predict(X)



plt.scatter(t, y, color = 'red')

X_grid = np.arange(min(t), max(t), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))

plt.plot(t, recover_model.predict(X), color = 'blue')
plt.title('Recovered Cases From'+date)
plt.xlabel(start_date)
plt.ylabel('Recovered Cases')
plt.show()









coviddata = pd.read_csv("covid_19_india.csv", usecols = ['Date', 'Time', 'State/UnionTerritory',	'Cured',	'Deaths',	'Confirmed'])
coviddata.tail(10)

newdata1 = coviddata[coviddata['State/UnionTerritory'] == 'Kerala']
recover = newdata1['Cured']
death = newdata1['Deaths']
confirmed = newdata1['Confirmed']


svr_rbf3 = SVR(kernel='poly', degree=3)

lw = 2

model_color = ['m', 'c', 'g']
y = pd.DataFrame(confirmed)

X1 = pd.DataFrame(range(len(confirmed)))


confirmed_model = svr_rbf3.fit(X1, y)


X1["data"] = confirmed_model.predict(X1)

y = pd.DataFrame(death)

svr_rbf3 = SVR(kernel='poly', degree=3)

death_model = svr_rbf3.fit(X1, y)

data = death_model.predict(X1)



t = pd.DataFrame(range(len(X1)))

plt.scatter(t, y, color = 'red')

X_grid = np.arange(min(t), max(t), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))

plt.plot(t, death_model.predict(X1), color = 'blue')
plt.title('Death Cases From'+date)
plt.xlabel(start_date)
plt.ylabel('Total Death Cases')
plt.show()



X11 = pd.DataFrame(range(len(confirmed) + 13))

y = confirmed_model.predict(X11)

X11["data"] = y

yy = recover_model.predict(X11)

# print(X11)

X22 = pd.DataFrame(range(len(confirmed) + 13))

X22["data"] = y

yyy = death_model.predict(X11)


# print(y)

# print(yy)

# print(yyy)

d = []

(y - (yy - yyy))

  
  
data = (y - (yy - yyy))

print(max(data))
t = pd.DataFrame(range(len(y)))

X_grid = np.arange(min(t), max(t), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))

plt.plot(t, data, color = 'blue')
plt.title('Convergance Graph starting from '+date)
plt.xlabel(start_date)
plt.ylabel('Total Confirm Cases')
plt.show()



plt.figure(figsize=(16, 9))
plt.plot(t, data)
plt.title('Convergance Graph from '+date, size=30)
plt.xlabel('Days Since '+date , size=30)
plt.ylabel('Days', size=30)
plt.xticks(size=10)
plt.yticks(size=10)
plt.show()

t1
t1



coviddata = pd.read_csv("covid_19_india.csv", usecols = ['Date', 'Time', 'State/UnionTerritory',	'Cured',	'Deaths',	'Confirmed'])

input = 'Kerala'

newdata1 = coviddata[coviddata['State/UnionTerritory'] == input]
recover = newdata1['Cured']
death = newdata1['Deaths']
confirmed = newdata1['Confirmed']
date = np.array(newdata1['Date'])[0]+" For "+input+" State of India "
start_date = 'Number of Days from First Case on Date'+date

svr_rbf3 = SVR(kernel='poly', degree=3)

lw = 2

model_color = ['m', 'c', 'g']

y = pd.DataFrame(confirmed)

X = pd.DataFrame(range(len(confirmed)))


confirmed_model = svr_rbf3.fit(X, y)

plt.scatter(X, y, color = 'red')

t = pd.DataFrame(range(len(X)))

X_grid = np.arange(min(t), max(t), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))

plt.plot(t, confirmed_model.predict(t), color = 'blue')
plt.title('Confirmed Cases From'+date)
plt.xlabel(start_date)
plt.ylabel('Total Confirm Cases')
plt.show()




X["data"] = confirmed_model.predict(X)

y = pd.DataFrame(recover)
svr_rbf3 = SVR(kernel='poly', degree=3)
recover_model = svr_rbf3.fit(X, y)

data = recover_model.predict(X)



t = pd.DataFrame(range(len(X)))

plt.scatter(t, y, color = 'red')

X_grid = np.arange(min(t), max(t), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))

plt.plot(t, recover_model.predict(X), color = 'blue')
plt.title('Recovered Cases From'+date)
plt.xlabel(start_date)
plt.ylabel('Recovered Cases')
plt.show()









coviddata = pd.read_csv("covid_19_india.csv", usecols = ['Date', 'Time', 'State/UnionTerritory',	'Cured',	'Deaths',	'Confirmed'])
coviddata.tail(10)

newdata1 = coviddata[coviddata['State/UnionTerritory'] == 'Kerala']
recover = newdata1['Cured']
death = newdata1['Deaths']
confirmed = newdata1['Confirmed']


svr_rbf3 = SVR(kernel='poly', degree=3)

lw = 2

model_color = ['m', 'c', 'g']
y = pd.DataFrame(confirmed)

X1 = pd.DataFrame(range(len(confirmed)))


confirmed_model = svr_rbf3.fit(X1, y)


X1["data"] = confirmed_model.predict(X1)

y = pd.DataFrame(death)

svr_rbf3 = SVR(kernel='poly', degree=3)

death_model = svr_rbf3.fit(X1, y)

data = death_model.predict(X1)



t = pd.DataFrame(range(len(X1)))

plt.scatter(t, y, color = 'red')

X_grid = np.arange(min(t), max(t), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))

plt.plot(t, death_model.predict(X1), color = 'blue')
plt.title('Death Cases From'+date)
plt.xlabel(start_date)
plt.ylabel('Total Death Cases')
plt.show()



X11 = pd.DataFrame(range(len(confirmed) + 1))

y = confirmed_model.predict(X11)

X11["data"] = y

yy = recover_model.predict(X11)

# print(X11)

X22 = pd.DataFrame(range(len(confirmed) + 1))

X22["data"] = y

yyy = death_model.predict(X11)


# print(y)

# print(yy)

# print(yyy)

d = []

(y - (yy - yyy))

  
  
data = (y - (yy - yyy))

print(max(data))

t = pd.DataFrame(range(len(y)))

X_grid = np.arange(min(t), max(t), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))

plt.plot(t, data, color = 'blue')
plt.title('Convergance Graph starting from '+date)
plt.xlabel(start_date)
plt.ylabel('Total Confirm Cases')
plt.show()



plt.figure(figsize=(16, 9))
plt.plot(t, data)
plt.title('Convergance Graph from '+date, size=30)
plt.xlabel('Days Since '+date , size=30)
plt.ylabel('Days', size=30)
plt.xticks(size=10)
plt.yticks(size=10)
plt.show()



coviddata = pd.read_csv("covid_19_india.csv", usecols = ['Date', 'Time', 'State/UnionTerritory',	'Cured',	'Deaths',	'Confirmed'])

input = 'Delhi'

newdata1 = coviddata[coviddata['State/UnionTerritory'] == input]
recover = newdata1['Cured']
death = newdata1['Deaths']
confirmed = newdata1['Confirmed']
date = np.array(newdata1['Date'])[0]+" For "+input+" State of India "
start_date = 'Number of Days from First Case on Date'+date
svr_rbf3 = SVR(kernel='poly', degree=3)

lw = 2

model_color = ['m', 'c', 'g']

y = pd.DataFrame(confirmed)

X = pd.DataFrame(range(len(confirmed)))


confirmed_model = svr_rbf3.fit(X, y)

plt.scatter(X, y, color = 'red')

t = pd.DataFrame(range(len(X)))

X_grid = np.arange(min(t), max(t), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))

plt.plot(t, confirmed_model.predict(t), color = 'blue')
plt.title('Confirmed Cases From'+date)
plt.xlabel(start_date)
plt.ylabel('Total Confirm Cases')
plt.show()

dat1 = [] 
recover = np.array(recover)
for i in range(1,len(recover)) :
  dat1.append(recover[i] - recover[i - 1])

dat2 = [] 
death = np.array(death)
for i in range(1,len(death)) :
  dat2.append(death[i] - death[i - 1])

dat3 = [] 
confirmed = np.array(confirmed)
for i in range(1,len(confirmed)) :
  dat3.append(confirmed[i] - confirmed[i - 1])

plt.figure(figsize=(16, 9))
    plt.bar(range(len(dat3)), dat3)
    plt.title('Daily Increases in Confirmed Cases', size=30)
    plt.xlabel('Number Days Since '+date, size=30)
    plt.ylabel('# of Cases', size=30)
    plt.xticks(size=20)
    plt.yticks(size=20)
    plt.show()

    plt.figure(figsize=(16, 9))
    plt.bar(range(len(dat2)), dat2)
    plt.title('Daily Increases in Deaths', size=30)
    plt.xlabel('Number Days Since '+date, size=30)
    plt.ylabel('# of Cases', size=30)
    plt.xticks(size=20)
    plt.yticks(size=20)
    plt.show()

    plt.figure(figsize=(16, 9))
    plt.bar(range(len(dat1)), dat1)
    plt.title('Daily Increases in Recoveries', size=30)
    plt.xlabel('Number Days Since '+date, size=30)
    plt.ylabel('Number of Cases', size=30)
    plt.xticks(size=20)
    plt.yticks(size=20)
    plt.show()

input = 'Delhi'

dl = coviddata[coviddata['State/UnionTerritory'] == input]
# print(coviddata.tail(20))

dl_Confirmed = dl['Confirmed']

dl_size = len(dl)

input = 'Kerala'

kl = coviddata[coviddata['State/UnionTerritory'] == input]

kl_Confirmed = kl['Confirmed']

kl_size = len(kl)

input = 'Maharashtra'

mh = coviddata[coviddata['State/UnionTerritory'] == input]

mh_Confirmed = mh['Confirmed']

mh_size = len(mh)

input = 'Madhya Pradesh'

mp = coviddata[coviddata['State/UnionTerritory'] == input]

mp_Confirmed = mp['Confirmed']

mp_size = len(mp)


list1 = [dl_size, kl_size, mh_size, mp_size]
list2 = [dl_Confirmed, kl_Confirmed, mh_Confirmed, mp_Confirmed]

m = max(list1)
print(m)
datas = range(m)


for i in range(len(list1)):
  list2[i] = np.hstack((np.zeros(m - len(list2[i])), list2[i]))
  print(list2[i])

plt.figure(figsize=(16, 9))
plt.plot(datas, list2[0])
plt.plot(datas, list2[1])
plt.plot(datas, list2[2])
plt.plot(datas, list2[3])
plt.title('# of Coronavirus Cases', size=30)
plt.xlabel('Starting From '+date, size=30)
plt.ylabel('# of Cases', size=30)
plt.legend(['Delhi', 'Kerala', 'Maharashtra', 'Madhya_Pradesh'], prop={'size': 20})
plt.xticks(size=20)
plt.yticks(size=20)
plt.show()

coviddata

!unzip covid-19-master.zip

cdata = pd.read_csv("/content/covid-19-master/data/countries-aggregated.csv")
india = cdata[cdata['Country'] == 'India']
china = cdata[cdata['Country'] == 'US']
print(india.head(10))
print(china.head(10))
print(india.size)
print(china.size)

# Commented out IPython magic to ensure Python compatibility.
import numpy as np 
import matplotlib.pyplot as plt 
import matplotlib.colors as mcolors
import xgboost
from sklearn.linear_model import LinearRegression, BayesianRidge
from sklearn.model_selection import RandomizedSearchCV, train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, mean_absolute_error
import datetime
import operator 
import pandas as pd

plt.style.use('fivethirtyeight')
# %matplotlib inline




# coviddata = pd.read_csv("covid_19_india.csv", usecols = ['Date', 'Time', 'State/UnionTerritory',	'Cured',	'Deaths',	'Confirmed'])

# input = 'Delhi'

# newdata1 = coviddata[coviddata['State/UnionTerritory'] == input]

input = 'china'
newdata1 = china
recover = newdata1['Recovered']
death = newdata1['Deaths']
confirmed = newdata1['Confirmed']
date = np.array(newdata1['Date'])[0]+" For "+input+" State of India"
start_date = 'Number of Days from First Case on Date'+date

svr_rbf3 = SVR(kernel='poly', degree=3)

lw = 2

model_color = ['m', 'c', 'g']

y = pd.DataFrame(confirmed)

X = pd.DataFrame(range(len(confirmed)))


confirmed_model = svr_rbf3.fit(X, y)

plt.scatter(X, y, color = 'red')

t = pd.DataFrame(range(len(X)))

X_grid = np.arange(min(t), max(t), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))

plt.plot(t, confirmed_model.predict(t), color = 'blue')
plt.title('Confirmed Cases From'+date)
plt.xlabel(start_date)
plt.ylabel('Total Confirm Cases')
plt.show()




X["data"] = confirmed_model.predict(X)

y = pd.DataFrame(recover)
svr_rbf3 = SVR(kernel='poly', degree=3)
recover_model = svr_rbf3.fit(X, y)

data = recover_model.predict(X)



t = pd.DataFrame(range(len(X)))

plt.scatter(t, y, color = 'red')

X_grid = np.arange(min(t), max(t), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))

plt.plot(t, recover_model.predict(X), color = 'blue')
plt.title('Recovered Cases From'+date)
plt.xlabel(start_date)
plt.ylabel('Recovered Cases')
plt.show()









# coviddata = pd.read_csv("covid_19_india.csv", usecols = ['Date', 'Time', 'State/UnionTerritory',	'Cured',	'Deaths',	'Confirmed'])
# coviddata.tail(10)

# newdata1 = coviddata[coviddata['State/UnionTerritory'] == 'Delhi']
newdata1 = china
recover = newdata1['Recovered']
death = newdata1['Deaths']
confirmed = newdata1['Confirmed']
date = np.array(newdata1['Date'])[0]+" For "+input+" State of India "
start_date = 'Number of Days from First Case on Date'+date

svr_rbf3 = SVR(kernel='poly', degree=3)

lw = 2

model_color = ['m', 'c', 'g']
y = pd.DataFrame(confirmed)

X1 = pd.DataFrame(range(len(confirmed)))


confirmed_model = svr_rbf3.fit(X1, y)


X1["data"] = confirmed_model.predict(X1)

y = pd.DataFrame(death)

svr_rbf3 = SVR(kernel='poly', degree=3)

death_model = svr_rbf3.fit(X1, y)

data = death_model.predict(X1)



t = pd.DataFrame(range(len(X1)))

plt.scatter(t, y, color = 'red')

X_grid = np.arange(min(t), max(t), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))

plt.plot(t, death_model.predict(X1), color = 'blue')
plt.title('Death Cases From'+date)
plt.xlabel(start_date)
plt.ylabel('Total Death Cases')
plt.show()



X11 = pd.DataFrame(range(len(confirmed) + 2))

y = confirmed_model.predict(X11)

X11["data"] = y

yy = recover_model.predict(X11)

# print(X11)

X22 = pd.DataFrame(range(len(confirmed) + 2))

X22["data"] = y

yyy = death_model.predict(X11)


# print(y)

# print(yy)

# print(yyy)

d = []

(y - (yy - yyy))

  
  
data = (y - (yy - yyy))

t = pd.DataFrame(range(len(y)))

X_grid = np.arange(min(t), max(t), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))

plt.plot(t, data, color = 'blue')
plt.title('Convergance Graph starting from '+date)
plt.xlabel(start_date)
plt.ylabel('Total Confirm Cases')
plt.show()



plt.figure(figsize=(16, 9))
plt.plot(t, data)
plt.title('Convergance Graph from '+date, size=30)
plt.xlabel('Days Since '+date , size=30)
plt.ylabel('Days', size=30)
plt.xticks(size=10)
plt.yticks(size=10)
plt.show()

coviddata = pd.read_csv("covid_19_india.csv", usecols = ['Date', 'Time', 'State/UnionTerritory',	'Cured',	'Deaths',	'Confirmed'])

input = 'Kerala'

newdata1 = coviddata[coviddata['State/UnionTerritory'] == input]

print(newdata1.shape)
newdata1

